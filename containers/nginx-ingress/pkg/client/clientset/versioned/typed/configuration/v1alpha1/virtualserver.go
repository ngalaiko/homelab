// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1alpha1 "github.com/nginxinc/kubernetes-ingress/pkg/apis/configuration/v1alpha1"
	scheme "github.com/nginxinc/kubernetes-ingress/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// VirtualServersGetter has a method to return a VirtualServerInterface.
// A group's client should implement this interface.
type VirtualServersGetter interface {
	VirtualServers(namespace string) VirtualServerInterface
}

// VirtualServerInterface has methods to work with VirtualServer resources.
type VirtualServerInterface interface {
	Create(*v1alpha1.VirtualServer) (*v1alpha1.VirtualServer, error)
	Update(*v1alpha1.VirtualServer) (*v1alpha1.VirtualServer, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.VirtualServer, error)
	List(opts v1.ListOptions) (*v1alpha1.VirtualServerList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.VirtualServer, err error)
	VirtualServerExpansion
}

// virtualServers implements VirtualServerInterface
type virtualServers struct {
	client rest.Interface
	ns     string
}

// newVirtualServers returns a VirtualServers
func newVirtualServers(c *K8sV1alpha1Client, namespace string) *virtualServers {
	return &virtualServers{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the virtualServer, and returns the corresponding virtualServer object, and an error if there is any.
func (c *virtualServers) Get(name string, options v1.GetOptions) (result *v1alpha1.VirtualServer, err error) {
	result = &v1alpha1.VirtualServer{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("virtualservers").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of VirtualServers that match those selectors.
func (c *virtualServers) List(opts v1.ListOptions) (result *v1alpha1.VirtualServerList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.VirtualServerList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("virtualservers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested virtualServers.
func (c *virtualServers) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("virtualservers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a virtualServer and creates it.  Returns the server's representation of the virtualServer, and an error, if there is any.
func (c *virtualServers) Create(virtualServer *v1alpha1.VirtualServer) (result *v1alpha1.VirtualServer, err error) {
	result = &v1alpha1.VirtualServer{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("virtualservers").
		Body(virtualServer).
		Do().
		Into(result)
	return
}

// Update takes the representation of a virtualServer and updates it. Returns the server's representation of the virtualServer, and an error, if there is any.
func (c *virtualServers) Update(virtualServer *v1alpha1.VirtualServer) (result *v1alpha1.VirtualServer, err error) {
	result = &v1alpha1.VirtualServer{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("virtualservers").
		Name(virtualServer.Name).
		Body(virtualServer).
		Do().
		Into(result)
	return
}

// Delete takes name of the virtualServer and deletes it. Returns an error if one occurs.
func (c *virtualServers) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("virtualservers").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *virtualServers) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("virtualservers").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched virtualServer.
func (c *virtualServers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.VirtualServer, err error) {
	result = &v1alpha1.VirtualServer{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("virtualservers").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
