apiVersion: v1
kind: Namespace
metadata:
  name: prometheus

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: prometheus-server
  namespace: prometheus
  labels:
    component: "server"
    app: prometheus
spec:
  selector:
    matchLabels:
      component: "server"
      app: prometheus
  replicas: 1
  template:
    metadata:
      namespace: prometheus
      labels:
        component: "server"
        app: prometheus
    spec:
      serviceAccountName: prometheus-server
      containers:
        - name: prometheus-server-configmap-reload
          image: "jimmidyson/configmap-reload:v0.3.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://127.0.0.1:9090/-/reload
          resources:
            {}
            
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true

        - name: prometheus-server
          image: "prom/prometheus:v2.11.1"
          imagePullPolicy: "IfNotPresent"
          args:
            - --storage.tsdb.retention.time=7d
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
            {}
            
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: /data
              subPath: ""
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
        
      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-server
        - name: storage-volume
          persistentVolumeClaim:
            claimName: prometheus-server

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: prometheus-kube-state-metrics
  namespace: prometheus
  labels:
    component: "kube-state-metrics"
    app: prometheus
spec:
  selector:
    matchLabels:
      component: "kube-state-metrics"
      app: prometheus
  replicas: 1
  template:
    metadata:
      namespace: prometheus
      labels:
        component: "kube-state-metrics"
        app: prometheus
    spec:
      serviceAccountName: prometheus-kube-state-metrics
      containers:
        - name: prometheus-kube-state-metrics
          image: "k8s.gcr.io/kube-state-metrics-arm:v1.7.2"
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: metrics
              containerPort: 8080
          resources:
            {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
